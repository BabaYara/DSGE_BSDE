$pdf_mode = 1;

# Use pdflatex with shell-escape so PythonTeX can run
$pdflatex = 'pdflatex -interaction=nonstopmode -synctex=1 -shell-escape %O %S';

# Put all build products into .out for a clean tree
$out_dir = '.out';
$aux_dir = '.out';

# Ensure BibTeX can find .bib files in the source tree even when running
# inside $aux_dir/.out. (kpathsea uses ':' as the path separator on *nix.)
$ENV{BIBINPUTS} = exists $ENV{BIBINPUTS}
  ? "$ENV{BIBINPUTS}:..:."
  : "..:.";

# Prefer biber for biblatex; configure search path for .bib when running in .out
$biber = 'biber --input-directory=.. %O %B';
# Disable BibTeX auto-use; we rely on biber via biblatex
$bibtex_use = 0;

# PythonTeX integration: run pythontex automatically whenever .pytxcode changes
add_cus_dep('pytxcode','pytxmcr',0,'pythontex');
use File::Basename;
sub pythontex {
  # latexmk passes the source file (typically in $out_dir) as the first arg
  # Run pythontex from inside $out_dir so that outputs (*.pytxmcr, *.pytxpyg)
  # are placed where latexmk expects them. If pythontex doesn't emit a
  # macros file for this document (e.g., console-only usage), create an
  # empty one to satisfy the dependency and allow latexmk to proceed.
  my ($src) = @_;
  # Normalize directory and name from the path latexmk gives us. This avoids
  # duplicate rule invocations with mixed relative/absolute paths.
  my $dir   = dirname($src);
  my $fname = basename($src);                  # e.g., BSDE_21.pytxcode
  my $job   = $fname; $job =~ s/\.pytxcode$//;  # BSDE_21

  my $is_windows = ($^O eq 'MSWin32');
  my $cmd_main;
  if ($is_windows) {
    # Use /d to allow drive letter change; keep nonstop interaction
    $cmd_main   = "cmd /c cd /d \"$dir\" && pythontex \"$fname\"";
  } else {
    $cmd_main   = "bash -lc 'cd \"$dir\" && pythontex \"$fname\"'";
  }

  my $res = system($cmd_main);
  # Note: If a transient format/version mismatch occurs, latexmk will
  # rerun LaTeX and re-invoke this rule; we don't try to pass extra flags.

  # Fallback: touch macros file(s) if missing so the dependency can be satisfied
  my $mcr_uc = "$dir/${job}.pytxmcr";              # BSDE_21.pytxmcr
  my $mcr_lc = "$dir/" . lc($job) . ".pytxmcr";  # bsde_21.pytxmcr
  unless (-e $mcr_uc or -e $mcr_lc) {
    open(my $fh, '>', $mcr_uc);
    print $fh "% PythonTeX macro placeholder (no-op)\n";
    close($fh);
  }
  return $res;
}

# Let latexmk handle biblatex+biber natively to avoid rule clashes

# Clean up PythonTeX artifacts on latexmk -c
$clean_ext .= ' pytxcode pytxpy pythontex-files-*';
